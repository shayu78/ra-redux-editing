{"version":3,"sources":["components/ServiceAdd.jsx","components/ServiceList.jsx","reducers/serviceList.js","reducers/serviceAdd.js","store/index.js","App.jsx","serviceWorker.js","index.js"],"names":["ServiceAdd","item","useSelector","state","serviceAdd","dispatch","useDispatch","handleChange","event","target","name","value","type","payload","field","className","onSubmit","preventDefault","id","price","onReset","onChange","required","min","max","ServiceList","items","serviceList","current","map","onClick","data","handleEdit","initialState","nanoid","reducer","combineReducers","action","Number","filter","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd330ee5.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport default function ServiceAdd() {\n\tconst item = useSelector((state) => state.serviceAdd);\n\tconst dispatch = useDispatch();\n\n\tconst handleChange = (event) => {\n\t\tconst { name, value } = event.target;\n\t\tdispatch({ type: 'CHANGE_SERVICE_FIELD', payload: { field: name, value } });\n\t}\n\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst { id, name, price } = item;\n\t\tdispatch({ type: 'ADD_SERVICE', payload: { id, name, price } });\n\t}\n\n\tconst handleReset = () => dispatch({ type: 'CANCEL_SERVICE' });\n\n\treturn (\n\t\t<form className=\"form\" onSubmit={handleSubmit} onReset={handleReset}>\n\t\t\t<input className=\"input w-100\" name=\"name\" onChange={handleChange} value={item.name} required />\n\t\t\t<input className=\"input\" type=\"number\" min=\"0\" max=\"999999\" name=\"price\" onChange={handleChange} value={item.price} required />\n\t\t\t<button className=\"button\" type=\"submit\">Save</button>\n\t\t\t{item.id && <button className=\"button\" type=\"reset\">Cancel</button>}\n\t\t</form>\n\t);\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport default function ServiceList() {\n  const items = useSelector((state) => state.serviceList);\n  const current = useSelector((state) => state.serviceAdd);\n  const dispatch = useDispatch();\n\n  const handleRemove = (id) => {\n    if (current.id === id) dispatch({ type: 'CANCEL_SERVICE' });\n    dispatch({ type: 'REMOVE_SERVICE', payload: { id } });\n  }\n\n  const handleEdit = (data) => {\n    const { id, name, price } = data;\n    dispatch({ type: 'EDIT_SERVICE', payload: { id, name, price } });\n  };\n\n  return (\n    <ul className=\"list\">\n      {items.map((value) => (\n        <li className=\"list__item\" key={value.id}>\n          <span className=\"list__item__name\">{value.name}</span>\n          <span className=\"list__item__price\">{value.price}</span>\n          <div className=\"buttons__wrapper\">\n            <i className=\"material-icons mini__button\" onClick={() => handleEdit(value)}>edit</i>\n            <i className=\"material-icons mini__button\" onClick={() => handleRemove(value.id)}>close</i>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { nanoid } from 'nanoid';\n\nconst initialState = [\n  { id: nanoid(), name: 'Замена стекла', price: 21000 },\n  { id: nanoid(), name: 'Замена дисплея', price: 25000 },\n];\n\nexport default function serviceListReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_SERVICE':\n      const { id, name, price } = action.payload;\n      if (id) return state.map((value) => (value.id === id) ? { id, name, price } : value);\n      return [...state, { id: nanoid(), name, price: Number(price) }];\n    case 'REMOVE_SERVICE':\n      const data = action.payload;\n      return state.filter((value) => value.id !== data.id);\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  id: null,\n  name: '',\n  price: '',\n};\n\nexport default function serviceAddReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'CHANGE_SERVICE_FIELD':\n      const { field, value } = action.payload;\n      return { ...state, [field]: value };\n    case 'EDIT_SERVICE':\n      const { id, name, price } = action.payload;\n      return { id, name, price };\n    case 'ADD_SERVICE':\n      return { ...initialState };\n    case 'CANCEL_SERVICE':\n      return { ...initialState };\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport serviceListReducer from '../reducers/serviceList';\nimport serviceAddReducer from '../reducers/serviceAdd';\n\nconst reducer = combineReducers({\n  serviceList: serviceListReducer,\n  serviceAdd: serviceAddReducer,\n});\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default store;\n","import React from 'react';\nimport ServiceAdd from './components/ServiceAdd';\nimport ServiceList from './components/ServiceList';\nimport './App.css';\nimport './bootstrap.min.css';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ServiceAdd />\n      <ServiceList />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}